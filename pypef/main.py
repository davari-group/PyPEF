# docstring for argument parsing using docopts
"""
PyPEF - Pythonic Protein Engineering Framework

Encoding-independent commands:
Creation of learning and validation sets: to split .CSV data in learning and validation sets run
    pypef mklsts [...]
Creation of prediction sets: To create prediction sets from CSV data single point mutational variants run
    pypef mkps [...]

PyPEF provides three encoding options:

    I. DCA: Based on couplings.param file (generated by the C framework PLMC_FILE).

    II. AAidx: Based on AAindex descriptors (566 amino acid descriptor files
               taken from the AAindex database).

    III. OneHot: Simple one-hot encoding representing the occurrence of an
               amino acid at a sequence position as a single 1 and 19 0's.

Further, DCA-based necoding allows a pure ML-based modeling as well as a hybrid
modeling approach; for details, see https://doi.org/10.1101/2022.06.07.495081

If an MSA can be constructed for the target sequence, e.g., using Jackhmmer,
encoding option I will likely outperform encoding option II.
However, encoding option II provides a static encoding technique that is
independent from the evolutionary history of a target sequence and
without the need for MSA construction.
Here, the AAidx encodings for modeling are compared, i.e., validated, with respect
to their performance on the test set (comparable to an hyperparameter search
for finding the best static encoding set for model inference).
Encoding option II is an alternative encoding and modeling technique if no MSA
can be constructed which is required for encoding option I.

Running using encoding option I:
based on features generated from the direct coupling analysis (PLMC_FILE outputted .params file,
optimization and performance testing only based on Spearman's correlation coefficient ->
only variant ranks are important, not predicted fitness value). For regression, only L2-
regularized linear regression (Ridge regression).
1. For generating an encoded variant-fitness file run
        pypef hybrid encode -i CSV_FILE -p plmc_params PLMC_FILE

Running using encoding option II:
based on features generated from the AAIndex database (566 amino acid descriptor
indices taken from the AAIndex database).
 1. To train and validate models run
        pypef aaidx -l Learning_Set.fasta -t TEST_Set.fasta [-s 5] [-t 4]
    ! Attention using ray for parallel computing ('') in Windows: Ray is not yet fully supported for Windows !
 2. To plot the validation creating a figure (.png) run
        pypef aaidx -m MODEL12345 -f TEST_Set.fasta
 3. To predict variants run
        pypef aaidx -m MODEL12345 -p Prediction_Set.fasta
    or for predicting variants in created prediction set folders exemplary run
        pypef aaidx -m MODEL12345 --pmult [--drecomb] [...] [--qdiverse]
    or for performing in silico directed evolution run:
        pypef aaidx directevo -m MODEL12345 [...]


Usage:
    pypef mklsts --wt WT_SEQ --input CSV_FILE
        [--drop THRESHOLD] [--numrnd NUMBER]
    pypef mkps --wt WT_SEQ --input CSV_FILE
        [--drop THRESHOLD] [--drecomb] [--trecomb] [--qarecomb] [--qirecomb]
        [--ddiverse] [--tdiverse] [--qdiverse]
    pypef encode --input CSV_FILE --encoding ENCODING_TECHNIQUE --wt WT_SEQ
        [--params PLMC_FILE] [--y_wt WT_FITNESS] [--model MODEL12345] [--nofft]
        [--threads THREADS] [--start START_POS]
        [--sep CSV_COLUMN_SEPARATOR] [--fitness_key FITNESS_KEY]
    pypef sto2a2m --sto STO_MSA_FILE [--inter_gap INTER_GAP] [--intra_gap INTRA_GAP]
    pypef hybrid --ls LEARNING_SET --ts TEST_SET --params PLMC_FILE
        [--label] [--threads THREADS] [--start START_POS]
    pypef hybrid --model MODEL --params PLMC_FILE
        [--ts TEST_SET] [--ps PREDICTION_SET]
        [--pmult] [--drecomb] [--trecomb] [--qarecomb] [--qirecomb]
                  [--ddiverse] [--tdiverse] [--qdiverse]
    pypef hybrid directevo --wt WT_SEQ --input CSV_FILE --params PLMC_FILE
        [--model MODEL12345] [--y_wt WT_FITNESS] [--numiter NUM_ITER]
        [--numtraj NUM_TRAJ] [--temp TEMPERATURE]
        [--negative] [--usecsv] [--csvaa] [--drop THRESHOLD]
    pypef hybrid train_and_save --input CSV_FILE --params PLMC_FILE
        [--train_size TRAIN_SIZE] [--train_val_size TRAIN_VAL_SIZE] [--test_size TEST_SIZE]
        [--threads THREADS] [--start START_POS] [--sep CSV_COLUMN_SEPARATOR]
        [--fitness_key FITNESS_KEY]
    pypef hybrid low_n --input ENCODED_CSV_FILE
        [--wt_pos WT_POSITION] [--threads THREADS] [--rnd_splits RND_SPLITS] [--sep CSV_COLUMN_SEPARATOR]
        [--mutation_sep MUTATION_SEPARATOR]
    pypef hybrid extrapolation --input ENCODED_CSV_FILE
        [--sep CSV_COLUMN_SEPARATOR] [--mutation_sep MUTATION_SEPARATOR] [--conc]
    pypef ml --encoding ENCODING_TECHNIQUE --ls LEARNING_SET --ts TEST_SET
        [--save NUMBER] [--regressor TYPE] [--nofft] [--all] [--params PLMC_FILE]
        [--sort METRIC_INT] [--threads THREADS] [--color]
    pypef ml --show
        [MODELS]
    pypef ml --encoding ENCODING_TECHNIQUE --model MODEL12345 --figure TS_FOR_PLOTTING
        [--label] [--color] [--y_wt WT_FITNESS] [--nofft] [--params PLMC_FILE] [--threads THREADS]
    pypef ml --encoding ENCODING_TECHNIQUE --model MODEL12345 --ps PREDICTION_SET
        [--nofft] [--negative]
    pypef ml --encoding ENCODING_TECHNIQUE --model MODEL12345 --pmult
        [--drecomb] [--trecomb] [--qarecomb] [--qirecomb]
        [--ddiverse] [--tdiverse] [--qdiverse] [--nofft] [--negative] [--params PLMC_FILE]
    pypef ml --encoding ENCODING_TECHNIQUE directevo --model MODEL12345 --wt WT_SEQ
        [--input CSV_FILE] [--y_wt WT_FITNESS] [--numiter NUM_ITER] [--numtraj NUM_TRAJ] [--temp TEMPERATURE]
        [--nofft] [--negative] [--usecsv] [--csvaa] [--drop THRESHOLD] [--params PLMC_FILE]
    pypef ml low_n --input ENCODED_CSV_FILE
        [--regressor TYPE] [--sep CSV_COLUMN_SEPARATOR] [--mutation_sep MUTATION_SEPARATOR]
    pypef ml extrapolation --input ENCODED_CSV_FILE [--regressor TYPE]
        [--sep CSV_COLUMN_SEPARATOR] [--mutation_sep MUTATION_SEPARATOR] [--conc]


Options:
  --all                             Finally training on all data [default: False].
  --color                           Color the plot for "true" and "false" predictions
                                    quarters [default: False].
  --conc                            Concatenating mutational level variants for predicting variants
                                    from next higher level [default: False].
  --csvaa                           Directed evolution csv amino acid substitutions,
                                    requires flag "--usecsv" [default: False].
  --ddiverse                        Create/predict double natural diverse variants [default: False].
  --drecomb                         Create/predict double recombinants [default: False].
  -d --drop THRESHOLD               Below threshold variants will be discarded from the
                                    data [default: -9E09].
  -e --encoding ENCODING_TECHNIQUE  Sets technique used for encoding sequences for constructing regression models;
                                    choose between 'aaidx' (AAIndex-based encoding), 'onehot' (OneHot-based encoding),
                                    and 'dca' (DCA-based encoding) [default: aaidx].
  -f --figure VS_FOR_PLOTTING       Validation set for plotting using a trained model.
  --fitness_key FITNESS_KEY         Label of CSV fitness column. Else uses second column.
  -h --help                         Show this screen [default: False].
  -i --input CSV_FILE               Input data file in .csv format.
  --inter_gap INTER_GAP             Fraction to delete all positions with more than
                                    'inter_gap' * 100 % gaps (columnar trimming) [default: 0.3].
  --intra_gap INTRA_GAP             Fraction to delete all sequences with more than
                                    'intra_gap' * 100 % gaps after being columnar trimmed
                                    (line trimming) [default: 0.5].
  --label                           Label the plot instances [default: False].
  -l --ls LEARNING_SET              Input learning set in .fasta format.
  -m --model MODEL12345             Model (pickle file) for plotting of validation or for
                                    performing predictions.
  --mutation_sep MUTATION_SEP       Mutation separator [default: /].
  --mutation_extrapolation          Mutation extrapolation [default: False].
  --negative                        Set if more negative values define better variants [default: False].
  --nofft                           Raw sequence input, i.e., no FFT for establishing protein spectra
                                    as vector inputs [default: False].
  -n --numrnd NUMBER                Number of randomly created Learning and Validation
                                    datasets [default: 0].
  --numiter NUM_ITER                Number of mutation iterations per evolution trajectory [default: 5].
  --numtraj NUM_TRAJ                Number of trajectories, i.e., evolution pathways [default: 5].
  --params PLMC_FILE                Input PLMC couplings parameter file.
  -u --pmult                        Predict for all prediction files in folder for recombinants
                                    or for diverse variants [default: False].
  -p --ps PREDICTION_SET            Prediction set for performing predictions using a trained Model.
  --qdiverse                        Create quadruple natural diverse variants [default: False].
  --qarecomb                        Create/predict quadruple recombinants [default: False].
  --qirecomb                        Create/predict quintuple recombinants [default: False].
  --regressor TYPE                  Type of regression (R.) to use, options: PLS CV R.: pls,
                                    PLS LOOCV R.: pls_loocv, Random Forest CV R.: rf, SVM CV R.: svr,
                                    MLP CV R.: mlp, Ridge CV R.: ridge (or l2),
                                    LassoLars CV R.: lassolars (or l1) [default: pls].
  --rnd_splits RND_SPLITS           Number of random splits for Low N testing [default: 5].
  -s --save NUMBER                  Number of models to be saved as pickle files [default: 5].
  --sep CSV_COLUMN_SEPARATOR        CSV Column separator [default: ;].
  --show                            Show achieved model performances from Model_Results.txt.
  --sort METRIC_INT                 Rank models based on metric {1: R^2, 2: RMSE, 3: NRMSE,
                                    4: Pearson's r, 5: Spearman's rho} [default: 1].
  --start START_POS                 Starting position for encoding variants [default: 1].
  --sto STO_MSA_FILE                The input MSA file in STO (Stockholm) format.
  --tdiverse                        Create/predict triple natural diverse variants [default: False].
  --temp TEMPERATURE                "Temperature" of Metropolis-Hastings criterion [default: 0.01]
  --threads THREADS                  Parallel computing of training and validation of models.
                                    Number of threads used in parallel computing, by default
                                    no hyperthreading.
  --train_size TRAIN_SIZE           Relative size of the train set for initial fitting [default: 0.6].
  --train_val_size TRAIN_VAL_SIZE   Relative size of the validation set used for training, i.e. model
                                    hyperparameter optimization on train subset used for validation [default: 0.2].
  --test_size TEST_SIZE             Relative size of the test set; if set to 0.0 the trained model
                                    will not be tested [default: 0.2].
  --trecomb                         Create/predict triple recombinants [default: False].
  --usecsv                          Perform directed evolution on single variant csv position
                                    data [default: False].
  -t --ts TEST_SET                  Input validation set in .fasta format.
  --version                         Show version [default: False].
  -w --wt WT_SEQ                    Input file (in FASTA format) for wild-type sequence.
  --wt_pos WT_POSITION              Row position of encoded wild-type in encoding CSV file (0-indexed) [default: 0].
  -y --y_wt WT_FITNESS              Fitness value (y) of wild-type [default: 1.0].
  encode                            Encoding [default: False].
  hybrid                            Hybrid modeling based on DCA-derived sequence encoding [default: False].
  ml                                Pure machine learning modeling based on encoded sequences [default: False].
  MODELS                            Number of saved models to show [default: 5].
  onehot                            OneHot-based encoding [default: False].
  sto2a2m                           Transform multiple sequence alignment from STO format to
                                    A2M format [default: False].
"""


from docopt import docopt
from schema import Schema, SchemaError, Optional, Or, Use

from pypef import VERSION
from pypef.aaidx.cli.run import run_pypef_pure_ml
from pypef.dca.run import run_pypef_hybrid_modeling
from pypef.utils.run import run_pypef_utils


schema = Schema({
    # '<name>': str,
    Optional('--all'): bool,
    Optional('--color'): bool,
    Optional('--conc'): bool,
    Optional('--csvaa'): bool,
    Optional('--ddiverse'): bool,
    Optional('--drecomb'): bool,
    Optional('--drop'): Use(float),
    Optional('--encoding'): Use(str),
    Optional('--figure'): Or(None, str),
    Optional('--fitness_key'): Or(None, str),
    Optional('--help'): bool,
    Optional('--input'): Or(None, str),
    Optional('--inter_gap'): Use(float),
    Optional('--intra_gap'): Use(float),
    Optional('--label'): bool,
    Optional('--ls'): Or(None, str),
    Optional('--model'): Or(None, str),  # str, Or(None, str),
    Optional('--mutation_sep'): Or(None, str),
    Optional('--negative'): bool,
    Optional('--nofft'): bool,
    Optional('--numrnd'): Use(int),
    Optional('--numiter'): Use(int),
    Optional('--numtraj'): Use(int),
    Optional('--params'): Or(None, str),
    Optional('--pmult'): bool,
    Optional('--ps'): Or(None, str),
    Optional('--qdiverse'): bool,
    Optional('--qarecomb'): bool,
    Optional('--qirecomb'): bool,
    Optional('--regressor'): Or(None, str),
    Optional('--rnd_splits'): Use(int),
    Optional('--save'): Use(int),
    Optional('--sep'): Or(None, str),
    Optional('--show'): Use(int),
    Optional('--sort'): Use(int),
    Optional('--start'): Use(int),
    Optional('--sto'): Or(None, str),
    Optional('--tdiverse'): bool,
    Optional('--temp'): Use(float),
    Optional('--test_size'): Use(float),
    Optional('--threads'): Or(None, Use(int)),
    Optional('--train_size'): Use(float),
    Optional('--train_val_size'): Use(float),
    Optional('--trecomb'): bool,
    Optional('--usecsv'): bool,
    Optional('--ts'): Or(None, str),
    Optional('--wt'): Or(None, str),
    Optional('--wt_pos'): Use(int),
    Optional('--y_wt'): Or(None, Use(float)),
    Optional('aaidx'): bool,
    Optional('hybrid'): bool,
    Optional('directevo'): bool,
    Optional('encode'): bool,
    Optional('extrapolation'): bool,
    Optional('low_n'): bool,
    Optional('mklsts'): bool,
    Optional('mkps'): bool,
    Optional('ml'): bool,
    Optional('MODELS'): Or(None, Use(int)),
    Optional('onehot'): bool,
    Optional('sto2a2m'): bool,
    Optional('train_and_save'): bool,
})


def validate(args):
    try:
        args = schema.validate(args)
        return args
    except SchemaError as e:
        exit(e)


if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    print(arguments)
    arguments = validate(arguments)
    print()
    if arguments['directevo']:
        run_pypef_utils(arguments)
    elif arguments['ml']:
        run_pypef_pure_ml(arguments)
    elif arguments['hybrid']:
        run_pypef_hybrid_modeling(arguments)
    else:
        run_pypef_utils(arguments)
        # name sets train, train_val, and test
